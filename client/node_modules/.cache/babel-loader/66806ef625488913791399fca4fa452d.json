{"ast":null,"code":"var _jsxFileName = \"D:\\\\Desk\\\\Rep\\\\RKSP I\\\\prakt5\\\\rec\\\\src\\\\components\\\\CheckBox.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getCheckBoxState } from \"../store/selector\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CustomCheckbox = props => {\n  _s();\n\n  // Reading state of checkbox and\n  // storing in checkBoxState variable.\n  // First check if checkbox id (props.checkBoxId)\n  // already exists in CustomCheckboxReducer.js state\n  // if not, then check if props.checkBoxState is set\n  // if not, then choose false\n  const checkBoxState = useSelector(getCheckBoxState(props.checkbox_id, props.checkbox_state));\n  const dispatch = useDispatch();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      ...props,\n      // set all props as attributes\n      // set checked state according to checkBoxState variable\n      // This variable satisfies the conditions of redux state\n      // and default value supplied in checkbox\n      checked: checkBoxState ? \"checked\" : \"\",\n      onChange: () => {\n        dispatch({\n          // calling dispatch to change state\n          type: \"CHANGE_CHECKBOX\",\n          // action matching in reducer\n          payload: {\n            // id need to be supplied as props when using this component\n            checkBoxId: props.checkbox_id,\n            checkBoxState: !checkBoxState\n          }\n        });\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this), props.text]\n  }, void 0, true);\n};\n\n_s(CustomCheckbox, \"kWDXdfguUZsjtGTK161XmyG54X4=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = CustomCheckbox;\nexport default CustomCheckbox;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomCheckbox\");","map":{"version":3,"sources":["D:/Desk/Rep/RKSP I/prakt5/rec/src/components/CheckBox.js"],"names":["React","useSelector","useDispatch","getCheckBoxState","CustomCheckbox","props","checkBoxState","checkbox_id","checkbox_state","dispatch","type","payload","checkBoxId","text"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAAQC,gBAAR,QAA+B,mBAA/B;;;;AAGA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAAA;;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,QAAMC,aAAa,GAAGL,WAAW,CAACE,gBAAgB,CAACE,KAAK,CAACE,WAAP,EAAoBF,KAAK,CAACG,cAA1B,CAAjB,CAAjC;AACA,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,sBACI;AAAA,4BACI;AACI,MAAA,IAAI,EAAC,UADT;AAAA,SAEQG,KAFR;AAEe;AACX;AACA;AACA;AACA,MAAA,OAAO,EAAEC,aAAa,GAAG,SAAH,GAAe,EANzC;AAOI,MAAA,QAAQ,EAAE,MAAM;AACZG,QAAAA,QAAQ,CAAC;AAAI;AACTC,UAAAA,IAAI,EAAE,iBADD;AACqB;AAC1BC,UAAAA,OAAO,EAAE;AACL;AACAC,YAAAA,UAAU,EAAEP,KAAK,CAACE,WAFb;AAGLD,YAAAA,aAAa,EAAE,CAACA;AAHX;AAFJ,SAAD,CAAR;AAQH;AAhBL;AAAA;AAAA;AAAA;AAAA,YADJ,EAmBKD,KAAK,CAACQ,IAnBX;AAAA,kBADJ;AAuBH,CAhCD;;GAAMT,c;UAOoBH,W,EACLC,W;;;KARfE,c;AAiCN,eAAeA,cAAf","sourcesContent":["import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {getCheckBoxState} from \"../store/selector\";\r\n\r\n\r\nconst CustomCheckbox = (props) => {\r\n    // Reading state of checkbox and\r\n    // storing in checkBoxState variable.\r\n    // First check if checkbox id (props.checkBoxId)\r\n    // already exists in CustomCheckboxReducer.js state\r\n    // if not, then check if props.checkBoxState is set\r\n    // if not, then choose false\r\n    const checkBoxState = useSelector(getCheckBoxState(props.checkbox_id, props.checkbox_state));\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <>\r\n            <input\r\n                type=\"checkbox\"\r\n                {...props} // set all props as attributes\r\n                // set checked state according to checkBoxState variable\r\n                // This variable satisfies the conditions of redux state\r\n                // and default value supplied in checkbox\r\n                checked={checkBoxState ? \"checked\" : \"\"}\r\n                onChange={() => {\r\n                    dispatch({   // calling dispatch to change state\r\n                        type: \"CHANGE_CHECKBOX\",  // action matching in reducer\r\n                        payload: {\r\n                            // id need to be supplied as props when using this component\r\n                            checkBoxId: props.checkbox_id,\r\n                            checkBoxState: !checkBoxState\r\n                        }\r\n                    });\r\n                }}\r\n            />\r\n            {props.text}\r\n        </>\r\n    );\r\n};\r\nexport default CustomCheckbox;"]},"metadata":{},"sourceType":"module"}